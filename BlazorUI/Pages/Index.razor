@page "/"

@using BlazorUI.Services.APIClients
@using HttpRequestModelsClassLibrary
@using Microsoft.AspNetCore.WebUtilities

@inject AnonymousDZIClient AnonymousClient
@inject NavigationManager NavManager

@if (HasInitialized)
{
    <div class="full-page-container">
        @if (ShowPopup)
        {
            <div class="centered p-4">@PopupText</div>
        }
        <div class="sidebar">
            <div class="card h-100">
                <div class="card-header">
                    <button type="button">
                        New pin
                    </button>
                    <button type="button">
                        New hotspot
                    </button>
                </div>
                <div class="card-body">
                    <div>
                        <ul class="list-group">
                            @if (AnnotationsOnCurrentPage != null)
                            {
                                @foreach (var annotation in AnnotationsOnCurrentPage)
                                {
                                    <li class="list-group-item">
                                        <p>@annotation.Body[0].Value</p>
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                    <div id="overlaysDiv">
                        @foreach (var overlay in OverlaysOnCurrentPage)
                        {
                            <span data-x="@overlay.X"
                                  data-y="@overlay.Y"
                                  class="pointer-cursor">
                                <span class="oi oi-pin" style="color:@overlay.Color;"></span>
                            </span>
                            <div class="border" @onclick="@(async() => { await Viewer.OpenSeadragonClient.PanTo(overlay.X, overlay.Y); })">
                                <span class="oi oi-pin" style="color:@overlay.Color;"></span>
                                <p>@overlay.Text</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="osd-display" @onclick="">
            <OpenSeadragonViewer @ref="Viewer"
                                 TileSourcePaths="TileSourcePaths"
                                 AnnotationPaths="AnnotationPaths"
                                 OnAnnotationsChanged="OnAnnotationsChanged"
                                 OnPageChanged="OnPageChanged"
                                 class="covers-entire-parent" />
        </div>
    </div>
}
else
{
    <div class="loading-screen">
        <div class="centered text-white text-center">
            <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                <span class="sr-only">Loading...</span>
            </div>
            <p class="mt-4">
                Downloading images.
            </p>
        </div>
    </div>
}

@code {
    private string[] TileSourcePaths { get; set; }
    private string[] AnnotationPaths { get; set; }
    private bool HasInitialized { get; set; } = false;

    private bool ShowPopup { get; set; } = false;
    private string PopupText { get; set; } = "";

    private OpenSeadragonViewer Viewer { get; set; }

    private int SidebarPane { get; set; } = 0;
    private W3CWebAnnotationModel[] AnnotationsOnCurrentPage { get; set; }
    private PinOverlayModel[] OverlaysOnCurrentPage { get; set; }

    private async Task OnAnnotationsChanged(W3CWebAnnotationModel[] annotations)
    {
        AnnotationsOnCurrentPage = annotations;
        this.StateHasChanged();
    }
    private async Task OnPageChanged(int newPage)
    {
        OverlaysOnCurrentPage = await AnonymousClient.GetOverlaysForTileSource(TileSourcePaths[newPage]);
        this.StateHasChanged();

        await Viewer.OpenSeadragonClient.UpdateOverlays();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Uri uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (!QueryHelpers.ParseQuery(uri.Query).TryGetValue("category", out var category))
        {
            category = "test category";
        }

        string[] DirectoryURIs = await AnonymousClient.GetDZIDirectoryURIsAsync(category);

        TileSourcePaths = new string[DirectoryURIs.Length];
        AnnotationPaths = new string[DirectoryURIs.Length];
        for (int i = 0; i < DirectoryURIs.Length; i++)
        {
            TileSourcePaths[i] = AnonymousClient.GetTileSourceURIFromDirectoryURI(DirectoryURIs[i]);
            AnnotationPaths[i] = AnonymousClient.GetAnnotationsURIFromDirectoryURI(DirectoryURIs[i]);
        }

        OverlaysOnCurrentPage = await AnonymousClient.GetOverlaysForTileSource(TileSourcePaths[0]);

        HasInitialized = true;
    }
}