@page "/"

@using BlazorUI.Services.APIClients
@using HttpRequestModelsClassLibrary
@using Microsoft.AspNetCore.WebUtilities

@inject AnonymousDZIClient AnonymousClient
@inject NavigationManager NavManager

@if (HasInitialized)
{
    <div class="full-page-container">
            @if (ShowPopup)
            {
                <div class="centered p-4">@PopupText</div>
            }
            <OpenSeadragonViewer @ref="Viewer"
                                    TileSourcePaths="TileSourcePaths"
                                    AnnotationPaths="AnnotationPaths"
                                    OnAnnotationsChanged="OnAnnotationsChanged"
                                    class="covers-entire-parent" />
        </div>
    }
else
{
    <div class="loading-screen">
        <div class="centered text-white text-center">
            <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                <span class="sr-only">Loading...</span>
            </div>
            <p class="mt-4">
                Downloading images.
            </p>
        </div>
    </div>
}

@code {
    private string[] TileSourcePaths { get; set; }
    private string[] AnnotationPaths { get; set; }
    private bool HasInitialized { get; set; } = false;

    private bool ShowPopup { get; set; } = false;
    private string PopupText { get; set; } = "";

    private OpenSeadragonViewer Viewer { get; set; }

    private W3CWebAnnotationModel[] AnnotationsOnCurrentPage { get; set; }

    private async Task OnAnnotationsChanged(W3CWebAnnotationModel[] annotations)
    {
        AnnotationsOnCurrentPage = annotations;
        this.StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Uri uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (!QueryHelpers.ParseQuery(uri.Query).TryGetValue("category", out var category))
        {
            category = "test category";
        }

        string[] DirectoryURIs = await AnonymousClient.GetDZIDirectoryURIsAsync(category);

        TileSourcePaths = new string[DirectoryURIs.Length];
        AnnotationPaths = new string[DirectoryURIs.Length];
        for (int i = 0; i < DirectoryURIs.Length; i++)
        {
            TileSourcePaths[i] = AnonymousClient.GetTileSourceURIFromDirectoryURI(DirectoryURIs[i]);
            AnnotationPaths[i] = AnonymousClient.GetAnnotationsURIFromDirectoryURI(DirectoryURIs[i]);
        }

        HasInitialized = true;
    }
}