@page "/"

@using BlazorUI.Services.APIClients
@using HttpRequestModelsClassLibrary
@using Microsoft.AspNetCore.WebUtilities
@using System.Web

@inject AnonymousDZIClient AnonymousClient
@inject AdminDZIClient AdminClient
@inject NavigationManager NavManager

@if (HasInitialized)
{
    @if (ShowPopup)
    {
        <div class="centered p-4">@PopupText</div>
    }
    <OpenSeadragonViewer @ref="Viewer"
                         TileSourcePaths="TileSourcePaths"
                         AnnotationPaths="AnnotationPaths"
                         OnAnnotationsChanged="OnAnnotationsChanged"
                         OnPageChanged="OnPageChanged"
                         class="covers-entire-parent" />
    <div class="dropdown-fixed-bottom-left">
        <button type="button" class="dropbtn override-button-default">
            <span class="oi oi-pin"></span>
        </button>
        <AuthorizeView>
            <Authorized>
                <button type="button" class="dropbtn override-button-default" @onclick="UploadAnnotationsOnPage">
                    <span class="oi oi-cloud-upload"></span>
                </button>
            </Authorized>
        </AuthorizeView>
        <div class="dropdown-content">
            @if (AnnotationsOnCurrentPage != null)
            {
                @foreach (var ann in AnnotationsOnCurrentPage)
                {
                    <a class="pointer-cursor" @onclick="@(async() => { await Viewer.OpenSeadragonClient.PanTo(ann.id); })">
                        @((ann.body[0].value.Length > 50) ? ann.body[0].value.Substring(0, 47) + "..." : ann.body[0].value)
                    </a>
                }
            }
        </div>
    </div>
    <div class="fixed-bottom-right text-white" style="margin-right:50px;">
        <!-- Button to trigger text editor creation triger modal -->
        <a class="mr-1 dropbtn pointer-cursor override-button-default" 
           data-toggle="modal" data-target="#descriptionModal" 
           @onmousedown="@(async() => { await GetDescriptionForPage(PageIndex); })">
            <span class="oi oi-info"></span>
        </a>
        <a href="/admin@((Category == "") ? "" : $"?category={Category}")" class="dropbtn override-button-default">
            <span class="oi oi-wrench"></span>
        </a>
    </div>

    <!-- Description modal -->
    <div class="modal fade"
         id="descriptionModal"
         tabindex="-1"
         role="dialog"
         aria-labelledby="exampleModalLabel"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="descriptionModalLabel">
                        Info
                    </h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                @if (Descriptions != null)
                {
                    <div class="modal-body">
                        @Descriptions[PageIndex]
                    </div>
                }
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="loading-screen">
        <div class="centered text-white text-center">
            <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                <span class="sr-only">Loading...</span>
            </div>
            <p class="mt-4">
                Downloading images.
            </p>
        </div>
    </div>
}

@code {
    public string Category { get; set; }
    public int PageIndex { get; set; } = 0;

    private string[] TileSourcePaths { get; set; }
    private string[] AnnotationPaths { get; set; }
    private bool HasInitialized { get; set; } = false;

    private bool ShowPopup { get; set; } = false;
    private string PopupText { get; set; } = "";

    public OpenSeadragonViewer Viewer { get; set; }

    private W3CWebAnnotationModel[] AnnotationsOnCurrentPage { get; set; }
    private MarkupString[] Descriptions { get; set; }

    private bool NightMode { get; set; } = false;

    private async Task OnAnnotationsChanged(W3CWebAnnotationModel[] annotations)
    {
        AnnotationsOnCurrentPage = annotations;
        this.StateHasChanged();
    }
    private async Task OnPageChanged(int page)
    {
        PageIndex = page; 
        this.StateHasChanged();
    }

    private async Task UploadAnnotationsOnPage()
    {
        int i = TileSourcePaths[PageIndex].LastIndexOf('/');
        await AdminClient.PostAnnotationsAsync(
            Category, TileSourcePaths[PageIndex].Substring(i + 1, TileSourcePaths[PageIndex].Length - i - 5), AnnotationsOnCurrentPage);
    }

    private async Task GetDescriptionForPage(int i)
    {
        if (Descriptions[i].Value == null)
        {
            string name = HttpUtility.UrlDecode(TileSourcePaths[i][(TileSourcePaths[i].LastIndexOf('/') + 1)..^4]);
            Descriptions[i] = await AnonymousClient.GetDescriptionAsync(Category, name);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Uri uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("category", out var category))
        {
            Category = category;
        }
        else
        {
            Category = "test category";
        }

        string[] DirectoryURIs = await AnonymousClient.GetDZIDirectoryURIsAsync(Category);

        TileSourcePaths = new string[DirectoryURIs.Length];
        AnnotationPaths = new string[DirectoryURIs.Length];
        Descriptions = new MarkupString[DirectoryURIs.Length];
        for (int i = 0; i < DirectoryURIs.Length; i++)
        {
            TileSourcePaths[i] = AnonymousClient.GetTileSourceURIFromDirectoryURI(DirectoryURIs[i]);
            AnnotationPaths[i] = AnonymousClient.GetAnnotationsURIFromDirectoryURI(DirectoryURIs[i]);
        }

        HasInitialized = true;
        // Viewer?.UpdateAsync();
    }
}