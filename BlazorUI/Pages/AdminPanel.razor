@page "/admin"

@using BlazorInputFile
@using BlazorUI.Services.APIClients
@using Microsoft.AspNetCore.Authorization
@using System.Web

@attribute [Authorize]

@inject AdminDZIClient AdminClient
@inject AnonymousDZIClient AnonymousClient
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime

<div style="pointer-events:@(ShowLoadingScreen ? "none" : "auto");overflow: hidden;">
    <div class="wrapper">
        <!-- Sidebar -->
        <nav id="sidebar">
            <div class="sidebar-header">
                <h3>Admin Panel</h3>
                <span class="oi oi-loop-circular" @onclick="UpdateInfo"></span>
            </div>
            <ul class="list-unstyled components">
                @for (int i = 0; i < Categories.Length; i++)
                {
                    int a = i;
                    <li>
                        <a class="pointer-cursor @((categoryIndex == i) ? "active" : "")" @onclick="@(() => { categoryIndex = a; })">
                            @Categories[i]
                        </a>
                        <ul class="list-unstyled" id="pageSubmenu">
                            @for (int j = 0; j < ImageNames[i].Length; j++)
                            {
                                int b = j;
                                <li>
                                    <a class="d-inline-flex justify-content-between w-100">
                                        @ImageNames[i][j]
                                        <span class="btn btn-danger pointer-cursor"
                                              @onclick="@(async() => { await OnDeleteButtonClicked(a, b); })">
                                            <span class="oi oi-delete"></span>
                                        </span>
                                    </a>
                                </li>
                            }
                        </ul>
                    </li>
                }
            </ul>
            <!-- Button to triger modal -->
            <button class="btn btn-light mb-4 ml-4" type="button" data-toggle="modal" data-target="#exampleModal">
                <span class="oi oi-plus"></span> New DZI file
            </button>
        </nav>
        <div id="content">
            <div class="container-fluid h-100">
                <iframe src="@($"{NavManager.BaseUri}{((Categories.Length > 0) ? $"?category={Categories[categoryIndex]}" : "")}")" style="width:90%;height:70%;margin:auto;"></iframe>
            </div>
        </div>
    </div>
    <!-- Modal -->
    <div class="modal fade"
         id="exampleModal"
         tabindex="-1"
         role="dialog"
         aria-labelledby="exampleModalLabel"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">
                        Make your own
                        <a href="https://github.com/openseadragon/openseadragon/wiki/The-DZI-File-Format"
                           target="_blank">
                            DZI image
                        </a>.
                    </h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>
                        Select an image file to be uploaded for processing. This might take a long time.
                    </p>
                    <div class="form-group">
                        <div class="form-group">
                            <label for="category" class="col-form-label">Category:</label>
                            <input id="category" class="form-control" @bind="Category">

                            <label for="tileWidth" class="col-form-label">Tile Size:</label>
                            <input id="tileWidth" class="form-control" @bind="TileSize">

                            <label for="overlap" class="col-form-label">Overlap:</label>
                            <input id="overlap" class="form-control" @bind="Overlap">
                        </div>
                    </div>
                    <div class="d-inline-flex">
                        <InputFile OnChange="OnFileselectedForDZICreation" oninput="$('#exampleModal').modal('hide');" />
                        <div id="spinner" class="spinner-border" role="status" style="display: none;">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                    <p class="text-muted" id="statusText"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

@if (ShowLoadingScreen)
{
    <div class="loading-screen">
        <div class="centered text-white text-center">
            <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                <span class="sr-only">Loading...</span>
            </div>
            <p class="mt-4">
                Uploading the image, this may take a while.
            </p>
        </div>
    </div>
}


@code {
    private string Category { get; set; } = "test category";
    private int TileSize { get; set; } = 512;
    private int Overlap { get; set; } = 1;

    private int categoryIndex { get; set; } = 0;
    private string[] Categories { get; set; } = new string[0];
    private string[][] ImageNames { get; set; } = new string[][] { new string[0] };

    private bool ShowLoadingScreen { get; set; } = false;

    private async Task OnFileselectedForDZICreation(IFileListEntry[] files)
    {
        ToggleLoadingScreen();
        await AdminClient.PostCreateDZIAsync(files[0], Category, TileSize, Overlap);
        ToggleLoadingScreen();

    }

    private void ToggleLoadingScreen()
    {
        ShowLoadingScreen = !ShowLoadingScreen;
        this.StateHasChanged();
    }

    private async Task OnDeleteButtonClicked(int a, int b)
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the image '{ImageNames[a][b]}' from category '{Categories[a]}'? This cannot be undone."))
        {
            await AdminClient.DeleteDZIAsync(Categories[a], ImageNames[a][b]);
            System.Threading.Thread.Sleep(1000);
            await UpdateInfo();
        }
    }

    private async Task UpdateInfo()
    {
        string[] categoryUris = await AnonymousClient.GetDZIDirectoryURIsAsync();
        string[] imageUris;
        Categories = categoryUris.Select(u => HttpUtility.UrlDecode(u[(u[0..^1].LastIndexOf('/') + 1)..^1])).ToArray();
        ImageNames = new string[Categories.Length][];
        for (int i = 0; i < categoryUris.Length; i++)
        {
            imageUris = await AnonymousClient.GetDZIDirectoryURIsAsync(Categories[i]);
            ImageNames[i] = imageUris.Select(u => HttpUtility.UrlDecode(u[(u[0..^1].LastIndexOf('/') + 1)..^1])).ToArray();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await UpdateInfo();
    }
}
