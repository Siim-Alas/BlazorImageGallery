@page "/admin"

@using BlazorInputFile
@using BlazorUI.Services.APIClients
@using Microsoft.AspNetCore.Authorization
@using System.Web
@using HttpRequestModelsClassLibrary
@using Microsoft.AspNetCore.WebUtilities

@attribute [Authorize]

@inject AdminDZIClient AdminClient
@inject AnonymousDZIClient AnonymousClient
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime

<div style="pointer-events:@(ShowLoadingScreen ? "none" : "auto");overflow: hidden;">
    <div class="wrapper">
        <!-- Sidebar -->
        <nav id="sidebar">
            <div class="sidebar-header">
                <h3 class="mb-4">Admin Panel</h3>
                @if (HasInitialized)
                {
                    <a class="dropbtn override-button-default" href="/?category=@StartingCategory">
                        <span class="oi oi-arrow-left"></span> Viewer
                    </a>
                }
                <a class="dropbtn override-button-default pointer-cursor" onclick="location.reload();">
                    <span class="oi oi-reload"></span> Reload
                </a>
            </div>
            <ul class="list-unstyled components">
                @for (int i = 0; i < Categories.Length; i++)
                {
                    int a = i;
                    <li>
                        <a class="pointer-cursor @((CategoryIndex == i) ? "semi-active" : "")" @onclick="@(async() => { await GoToImage(a, 0); })">
                            @Categories[i]
                        </a>
                        <ul class="list-unstyled" id="pageSubmenu">
                            @for (int j = 0; j < ImageNames[i].Length; j++)
                            {
                                int b = j;
                                <li>
                                    <a class="d-inline-flex justify-content-between p-0 w-100 @(((CategoryIndex == i) && (PageIndex == j)) ? "active" : "")">
                                        <span class="w-100 p-3 pointer-cursor" @onclick="@(async() => { await GoToImage(a, b); })">
                                            @ImageNames[i][j]
                                        </span>
                                        <span class="btn btn-danger m-2 pointer-cursor"
                                              @onclick="@(async() => { await OnDeleteButtonClicked(a, b); })">
                                            <span class="oi oi-delete"></span>
                                        </span>
                                    </a>
                                </li>
                            }
                        </ul>
                    </li>
                }
            </ul>
            <!-- Button to trigger DZI creation triger modal -->
            <button class="btn btn-light mb-4 ml-4" type="button" 
                    data-toggle="modal" data-target="#dziCreationModal">
                <span class="oi oi-plus"></span> New DZI file
            </button>
            <!-- Button to trigger text editor creation triger modal -->
            <button class="btn btn-light mb-4 ml-4" type="button" 
                    data-toggle="modal" data-target="#textEditorModal"
                    @onmousedown="@(async() => { await GetDescription(CategoryIndex, PageIndex); })">
                <span class="oi oi-plus"></span> Edit Description
            </button>
        </nav>
        <div id="content">
            <!-- Begin Index.razor clone -->
            @if (HasInitialized)
            {
                <OpenSeadragonViewer @ref="Viewer"
                                        TileSourcePaths="TileSourcePaths[CategoryIndex]"
                                        AnnotationPaths="AnnotationPaths[CategoryIndex]"
                                        OnAnnotationsChanged="OnAnnotationsChanged"
                                        OnPageChanged="@(async (int page) => { PageIndex = page; })"
                                        class="covers-entire-parent" />
                <div class="bottom-left-of-parent position-absolute">
                    <div id="annotationsToggleButton" @onclick="ToggleDisplayAnnotations"></div>
                    
                    <div id="annotationsUploadButton" @onclick="UploadAnnotationsOnPage"></div>
                    <div class="annotation-menu-content">
                        @if (DisplayAnnotations)
                        {
                            <a><h4>Annotations:</h4></a>
                        }

                        @if (AnnotationsOnCurrentPage != null)
                        {
                            @foreach (var ann in AnnotationsOnCurrentPage)
                            {
                                <a class="pointer-cursor" @onclick="@(async() => { await Viewer.OpenSeadragonClient.PanTo(ann.id); })">
                                    @((ann.body[0].value.Length > 50) ? ann.body[0].value.Substring(0, 47) + "..." : ann.body[0].value)
                                </a>
                            }
                        }
                    </div>
                </div>
            }
            <!-- End Index.razor clone -->
        </div>
    </div>
    <!-- DZI creation modal -->
    <div class="modal fade"
            id="dziCreationModal"
            tabindex="-1"
            role="dialog"
            aria-labelledby="exampleModalLabel"
            aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="dziCreationModalLabel">
                        Make your own
                        <a href="https://github.com/openseadragon/openseadragon/wiki/The-DZI-File-Format"
                            target="_blank">
                            DZI image
                        </a>.
                    </h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>
                        Select an image file to be uploaded for processing. This might take a long time.
                    </p>
                    <div class="form-group">
                        <div class="form-group">
                            <label class="col-form-label">Category:</label>
                            <Searchbar Options="Categories" @bind-SearchText="Category" />

                            <label for="tileWidth" class="col-form-label">Tile Size:</label>
                            <input id="tileWidth" class="form-control" @bind="TileSize" />

                            <label for="overlap" class="col-form-label">Overlap:</label>
                            <input id="overlap" class="form-control" @bind="Overlap" />
                        </div>
                    </div>
                    <div class="d-inline-flex">
                        <InputFile OnChange="OnFileselectedForDZICreation" oninput="$('#dziCreationModal').modal('hide');" />
                    </div>
                    <p class="text-muted" id="statusText"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Text editor modal -->
    <div class="modal fade"
            id="textEditorModal"
            tabindex="-1"
            role="dialog"
            aria-labelledby="exampleModalLabel"
            aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="textEditorModalLabel">
                        Info
                    </h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                @if (Descriptions != null)
                {
                    <div class="modal-body">
                        <HTMLEditor @ref="Editor" Content="Descriptions[CategoryIndex][PageIndex]" />
                        <button class="btn btn-primary"
                                type="button"
                                @onclick="PostDescription">
                            Save Description
                        </button>
                    </div>
                }
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

@if (ShowLoadingScreen)
{
    <div class="loading-screen">
        <div class="centered text-white text-center">
            <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    </div>
}


@code {
    private string Category { get; set; } = "";
    private int TileSize { get; set; } = 512;
    private int Overlap { get; set; } = 1;

    private string StartingCategory { get; set; }

    private int CategoryIndex { get; set; } = 0;
    private int PageIndex { get; set; } = 0;
    private string[] Categories { get; set; } = new string[0];
    private string[][] ImageNames { get; set; } = new string[][] { new string[0] };

    private string[][] TileSourcePaths { get; set; }
    private string[][] AnnotationPaths { get; set; }

    private MarkupString[][] Descriptions { get; set; }

    private OpenSeadragonViewer Viewer { get; set; }
    private HTMLEditor Editor { get; set; }
    private W3CWebAnnotationModel[] AnnotationsOnCurrentPage { get; set; }

    private bool DisplayAnnotations { get; set; } = false;

    private bool HasInitialized { get; set; } = false;
    private bool ShowLoadingScreen { get; set; } = false;

    private async Task ToggleDisplayAnnotations()
    {
        DisplayAnnotations = !DisplayAnnotations;
        await Viewer.OpenSeadragonClient.SetDisplayAnnotations(DisplayAnnotations);
        this.StateHasChanged();
    }

    private async Task PostDescription()
    {
        ToggleLoadingScreen();
        Descriptions[CategoryIndex][PageIndex] = await Editor.GetInnerHTML();
        await AdminClient.PostDescriptionAsync(
            Categories[CategoryIndex], ImageNames[CategoryIndex][PageIndex], Descriptions[CategoryIndex][PageIndex]);
        ToggleLoadingScreen();
    }

    private async Task OnFileselectedForDZICreation(IFileListEntry[] files)
    {
        IFileListEntry file = files?.FirstOrDefault();

        if (file != null)
        {
            ToggleLoadingScreen();
            await AdminClient.PostCreateDZIAsync(file, Category, TileSize, Overlap);
            ToggleLoadingScreen();
        }
    }

    private void ToggleLoadingScreen()
    {
        ShowLoadingScreen = !ShowLoadingScreen;
        this.StateHasChanged();
    }

    private async Task OnDeleteButtonClicked(int a, int b)
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the image '{ImageNames[a][b]}' from category '{Categories[a]}'? This cannot be undone."))
        {
            if ((CategoryIndex == a) && ((PageIndex == ImageNames[a].Length - 1)))
            {
                if (PageIndex == 0)
                {
                    await GoToImage(0, 0);
                }
                else
                {
                    await GoToImage(a, 0);
                }
            }
            await AdminClient.DeleteDZIAsync(Categories[a], ImageNames[a][b]);
            System.Threading.Thread.Sleep(500);
            await UpdateInfo();
            if (CategoryIndex == a)
            {
                await Viewer.UpdateAsync();
                PageIndex = 0;
            }
        }
    }

    private async Task GoToImage(int categoryIndex, int pageIndex)
    {
        PageIndex = pageIndex;
        if (CategoryIndex != categoryIndex)
        {
            CategoryIndex = categoryIndex;
            await Viewer.UpdateAsync();
        }
        await Viewer.OpenSeadragonClient.GoToPage(pageIndex);

        this.StateHasChanged();
    }

    private async Task GetDescription(int categoryIndex, int pageIndex)
    {
        if (Descriptions[categoryIndex][pageIndex].Value == null)
        {
            Descriptions[categoryIndex][pageIndex] = await AnonymousClient.GetDescriptionAsync(
                Categories[categoryIndex], ImageNames[categoryIndex][pageIndex]);
        }
    }

    private async Task UpdateInfo()
    {
        string[] categoryUris = await AnonymousClient.GetDZIDirectoryURIsAsync();
        Categories = categoryUris.Select(u => HttpUtility.UrlDecode(u[(u[0..^1].LastIndexOf('/') + 1)..^1])).ToArray();
        ImageNames = new string[Categories.Length][];
        TileSourcePaths = new string[Categories.Length][];
        AnnotationPaths = new string[Categories.Length][];
        Descriptions = new MarkupString[Categories.Length][];
        for (int i = 0; i < categoryUris.Length; i++)
        {
            string[] directoryURIs = await AnonymousClient.GetDZIDirectoryURIsAsync(Categories[i]);
            TileSourcePaths[i] = new string[directoryURIs.Length];
            AnnotationPaths[i] = new string[directoryURIs.Length];
            Descriptions[i] = new MarkupString[directoryURIs.Length];

            ImageNames[i] = directoryURIs.Select(u => HttpUtility.UrlDecode(u[(u[0..^1].LastIndexOf('/') + 1)..^1])).ToArray();

            for (int j = 0; j < directoryURIs.Length; j++)
            {
                TileSourcePaths[i][j] = AnonymousClient.GetTileSourceURIFromDirectoryURI(directoryURIs[j]);
                AnnotationPaths[i][j] = AnonymousClient.GetAnnotationsURIFromDirectoryURI(directoryURIs[j]);
            }
        }
    }

    private async Task OnAnnotationsChanged(W3CWebAnnotationModel[] annotations)
    {
        AnnotationsOnCurrentPage = annotations;
        this.StateHasChanged();
    }

    private async Task UploadAnnotationsOnPage()
    {
        ToggleLoadingScreen();
        int i = TileSourcePaths[CategoryIndex][PageIndex].LastIndexOf('/');
        await AdminClient.PostAnnotationsAsync(
            Categories[CategoryIndex], ImageNames[CategoryIndex][PageIndex], AnnotationsOnCurrentPage);
        ToggleLoadingScreen();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await UpdateInfo();
        Uri uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("category", out var category))
        {
            StartingCategory = category;
            CategoryIndex = Array.IndexOf(Categories, (string)category);
            if (CategoryIndex == -1)
            {
                CategoryIndex = 0;
            }
        }
        else
        {
            StartingCategory = Categories[0];
        }
        HasInitialized = true;
        Viewer?.UpdateAsync();
    }
}
