/*
	This plugin is created by Koen Griffioen. Code adapted from the Openseadragon-selection plugin.
	If you need to contact me, please find me on github, KTGLeiden.
*/
!function (e) { "use strict"; if (!e.version || e.version.major < 2) throw new Error("This version of OpenSeadragonScreenshot requires OpenSeadragon version 2.0.0+"); function t() { this.closeMenu() } e.Viewer.prototype.screenshot = function (t) { return this.screenshotInstance && !t || ((t = t || {}).viewer = this, this.screenshotInstance = new e.Screenshot(t)), this.screenshotInstance }, e.Screenshot = function (n) { if (e.extend(!0, this, { viewer: null, buttonActiveImg: !1, screenshotWidth: 1e3, screenshotHeight: 1e3, showingMenu: !1, makingScreenshot: !1, menuDiv: null, loadingDiv: null, toggleButton: null, navImages: { screenshot: { REST: "selection_rest.png", GROUP: "selection_grouphover.png", HOVER: "selection_hover.png", DOWN: "selection_pressed.png" } }, showOptions: !1, showScreenshotControl: !0, keyboardShortcut: null }, n), e.extend(!0, this.navImages, this.viewer.navImages), !this.loadingDiv) { this.loadingDiv = document.createElement("div"), this.loadingDiv.style.background = "rgba(1,1,1, 0.3)"; var i = document.createElement("img"); i.src = this.viewer.prefixUrl + "ajax_loader_gray_32.gif", i.setAttribute("crossOrigin", "anonymous"), this.loadingDiv.style.position = "absolute", this.loadingDiv.style.top = "0px", this.loadingDiv.style.left = "0px", this.loadingDiv.style.width = this.viewer.viewport.containerSize.x + "px", this.loadingDiv.style.height = this.viewer.viewport.containerSize.y + "px", this.loadingDiv.style.backgroundColor = "#fff"; var s = document.createElement("div"); s.appendChild(i), s.style.margin = "-16px 0 0 -16px", s.style.position = "absolute", s.style.top = Math.round(this.viewer.viewport.containerSize.y / 2) + "px", s.style.left = Math.round(this.viewer.viewport.containerSize.x / 2) + "px", s.innerHTML += "Loading image... <br>Takes too long?<br>"; var o = document.createElement("button"); o.onclick = function () { window.location.reload() }, o.innerHTML = "Refresh page", s.appendChild(o), this.loadingDiv.appendChild(s), document.body.appendChild(this.loadingDiv), this.loadingDiv.className = "screenshot-box", this.loadingDiv.style.display = "none" } if (this.showOptions && !this.menuDiv) { var r = this.viewer.container, h = document.createElement("div"); h.style.position = "absolute", h.style.backgroundColor = "#f3f3f3", h.style.width = "30%", h.style.minWidth = "400px", h.style.padding = "20px", h.style.margin = "-100px 0 0 -200px", h.style.top = "50%", h.style.left = "50%", h.style.fontFamily = "Tahoma,Arial,sans-serif"; var a = document.createElement("a"); a.style.position = "absolute", a.innerHTML = "&times;", a.style.position = "absolute", a.style.top = "20px", a.style.right = "30px", a.style.fontSize = "30px", a.style.fontWeight = "bold", a.style.textDecoration = "none", a.style.color = "#333", a.style.cursor = "pointer", a.id = "screenshotCloseButton"; var l = document.createElement("p"); l.id = "screenshotTextMessage", l.display = "block"; var c = document.createElement("div"), d = []; (v = document.createElement("div")).style.fontSize = "20px", v.style.lineHeight = "20px", d.push(v); var u = document.createElement("input"); u.type = "radio", u.name = "screenshotForm", u.style.height = "25px", u.id = "screenshotZFCheck", u.setAttribute("checked", !0), v.appendChild(u), v.innerHTML += "Zoom factor:"; var p = document.createElement("input"); p.type = "range", p.id = "screenshotZFInput", p.max = "3", p.min = "0.25", p.step = "0.25", v.appendChild(p); var g = document.createElement("span"); g.setAttribute("id", "screenshotZFDisplay"), g.setAttribute("value", "1"), v.appendChild(g), v.innerHTML += " times", (v = document.createElement("div")).style.fontSize = "20px", v.style.lineHeight = "20px", d.push(v); var m = document.createElement("input"); if (m.type = "radio", m.style.height = "25px", m.id = "screenshotUseVpSize", m.name = "screenshotForm", v.appendChild(m), v.innerHTML += "Just take a screenshot", this.viewer.annotationInstance) { var v = document.createElement("div"); d.push(v); var w = document.createElement("input"); w.type = "checkbox", w.style.height = "25px", w.id = "screenshotDrawArrows", v.appendChild(w), v.innerHTML += "Also draw annotations" } if (this.viewer.scalebarInstance) { v = document.createElement("div"); d.push(v); var y = document.createElement("input"); y.type = "checkbox", y.style.height = "25px", y.id = "screenshotDrawScalebar", v.appendChild(y), v.innerHTML += "Draw scalebar as well" } var b = document.createElement("button"); b.innerHTML = "Download image", b.onclick = this.takeScreenshot.bind(this, b), b.ontouchstart = this.takeScreenshot.bind(this, b), b.style.height = "40px", b.style.lineHeight = "30px", b.style.fontSize = "24px", b.style.margin = "0 auto", b.style.display = "block"; for (var x = d.length - 1; x >= 0; x--)c.appendChild(d[x]); h.appendChild(a), h.appendChild(c), h.appendChild(l), h.appendChild(b), r.appendChild(h), this.showingMenu = !1, this.menuDiv = h, this.menuDiv.style.display = "none", document.getElementById("screenshotZFCheck").onchange = this.menuUpdate.bind(this), document.getElementById("screenshotZFInput").onchange = this.menuUpdate.bind(this), document.getElementById("screenshotZFInput").oninput = this.menuUpdate.bind(this), document.getElementById("screenshotUseVpSize").onchange = this.menuUpdate.bind(this), document.getElementById("screenshotCloseButton").onclick = this.closeMenu.bind(this) } var f = this.prefixUrl || this.viewer.prefixUrl || "", S = this.viewer.buttons && this.viewer.buttons.buttons, D = S ? this.viewer.buttons.buttons[0] : null, I = D ? D.onFocus : null, k = D ? D.onBlur : null; this.showScreenshotControl && (this.toggleButton = new e.Button({ element: this.toggleButton ? e.getElement(this.toggleButton) : null, clickTimeThreshold: this.viewer.clickTimeThreshold, clickDistThreshold: this.viewer.clickDistThreshold, tooltip: e.getString("Tooltips.ScreenshotToggle") || "Make Screenshot", srcRest: f + this.navImages.screenshot.REST, srcGroup: f + this.navImages.screenshot.GROUP, srcHover: f + this.navImages.screenshot.HOVER, srcDown: f + this.navImages.screenshot.DOWN, onRelease: this.toggleScreenshotMenu.bind(this), onFocus: I, onBlur: k }), S && (this.viewer.buttons.buttons.push(this.toggleButton), this.viewer.buttons.element.appendChild(this.toggleButton.element)), this.toggleButton.imgDown && (this.buttonActiveImg = this.toggleButton.imgDown.cloneNode(!0), this.toggleButton.element.appendChild(this.buttonActiveImg))), this.outerTracker = new e.MouseTracker({ element: this.viewer.drawer.canvas, clickTimeThreshold: this.viewer.clickTimeThreshold, clickDistThreshold: this.viewer.clickDistThreshold, clickHandler: e.delegate(this, t), startDisabled: !this.showingMenu }) }, e.extend(e.Screenshot.prototype, e.ControlDock.prototype, { closeMenu: function () { return this.menuDiv && (this.menuDiv.style.display = "none"), this.showingMenu = !1, this.outerTracker.setTracking(!1), !0 }, takeScreenshot: function () { this.loadingDiv.style.display = "inline"; var e = this.viewer.viewport.containerSize, t = e.x, n = e.y, i = this.screenshotWidth, s = this.screenshotHeight; if (this.showOptions) { this.viewer.viewport.getMaxZoom(), this.viewer.viewport.getZoom(); this.viewer.element.style.height = s + "px", this.viewer.element.style.width = i + "px", this.closeMenu() } var o = this.viewer, r = this.loadingDiv, h = function () { o.world.getItemAt(0).removeAllHandlers("fully-loaded-change"), r.style.display = "none"; var e = null; if (o.screenshotInstance.showOptions && o.scalebarInstance && document.getElementById("screenshotDrawScalebar").checked) { var i = o.drawer.canvas; (e = document.createElement("canvas")).width = i.width, e.height = i.height, console.log(i.width + "/" + i.height); var s = e.getContext("2d"); s.drawImage(i, 0, 0), screenshotDrawArrows && o.annotationInstance && o.annotationInstance.drawArrowsOnCanvas(e); var h = o.scalebarInstance.getAsCanvas(), a = o.scalebarInstance.getScalebarLocation(); s.drawImage(h, a.x, a.y) } else e = o.drawer.canvas; e.toBlob(function (e) { saveAs(e, "screenshot.png"), o.element.style.height = n + "px", o.element.style.width = t + "px" }) }; return this.showOptions ? requestAnimationFrame(function () { o.forceRedraw(), o.world.getItemAt(0).getFullyLoaded() ? h() : o.world.getItemAt(0).addHandler("fully-loaded-change", h) }) : o.world.getItemAt(0).getFullyLoaded() ? h() : o.world.getItemAt(0).addHandler("fully-loaded-change", h), !0 }, toggleScreenshotMenu: function () { return this.showOptions ? (this.outerTracker.setTracking(!this.showingMenu), this.showingMenu ? (this.closeMenu.bind(this), !0) : (this.showMenu(), this.menuUpdate(), !0)) : (this.takeScreenshot(), !0) }, showMenu: function () { this.menuDiv.style.display = "inline", this.showingMenu = !0 }, menuUpdate: function () { this.viewer.viewport.containerSize.y, this.viewer.viewport.containerSize.x, document.getElementById("screenshotZFCheck").checked; if (document.getElementById("screenshotUseVpSize").checked) this.screenshotWidth = this.viewer.viewport.containerSize.x, this.screenshotHeight = this.viewer.viewport.containerSize.y; else { var e = document.getElementById("screenshotZFInput").value, t = this.viewer.viewport.containerSize.x, n = this.viewer.viewport.containerSize.y; this.screenshotWidth = t * e, this.screenshotHeight = n * e, document.getElementById("screenshotZFDisplay").innerHTML = e } document.getElementById("screenshotTextMessage").innerHTML = "Size of download: " + Math.round(this.screenshotWidth) + "x" + Math.round(this.screenshotHeight) } }) }(OpenSeadragon);